
project frameworks/base/
diff --git a/include/androidfw/AttributeFinder.h b/include/androidfw/AttributeFinder.h
index acf7056..a06dd3a 100644
--- a/include/androidfw/AttributeFinder.h
+++ b/include/androidfw/AttributeFinder.h
@@ -19,6 +19,8 @@
 
 #include <stdint.h>
 #include <utils/KeyedVector.h>
+//add by zhao.liu
+#include <yqzy/YQZYAaptConfig.h>
 
 namespace android {
 
@@ -95,11 +97,13 @@ BackTrackingAttributeFinder<Derived, Iterator>::BackTrackingAttributeFinder(cons
 
 template <typename Derived, typename Iterator>
 void BackTrackingAttributeFinder<Derived, Iterator>::jumpToClosestAttribute(const uint32_t packageId) {
+printf("@@@@@@@@@@BackTrackingAttributeFinder jumpToClosestAttribute %d ",packageId);
     switch (packageId) {
         case 0x01:
             mCurrent = mFrameworkStart;
             break;
-        case 0x7f:
+	//case 0x7f: modify by zhao.liu
+        case YQZYAaptConfig::getInstance()->getPackageGroupId():
             mCurrent = mAppStart;
             break;
         default: {
@@ -128,11 +132,13 @@ void BackTrackingAttributeFinder<Derived, Iterator>::jumpToClosestAttribute(cons
 
 template <typename Derived, typename Iterator>
 void BackTrackingAttributeFinder<Derived, Iterator>::markCurrentPackageId(const uint32_t packageId) {
+	printf("@@@@@@@@@@BackTrackingAttributeFinder markCurrentPackageId %d ",packageId);
     switch (packageId) {
         case 0x01:
             mFrameworkStart = mCurrent;
             break;
-        case 0x7f:
+       // case 0x7f:
+	case YQZYAaptConfig::getInstance()->getPackageGroupId():
             mAppStart = mCurrent;
             break;
         default:
diff --git a/libs/androidfw/Android.mk b/libs/androidfw/Android.mk
index 2f28700..74bf178 100644
--- a/libs/androidfw/Android.mk
+++ b/libs/androidfw/Android.mk
@@ -35,7 +35,8 @@ deviceSources := \
     BackupHelpers.cpp \
     CursorWindow.cpp
 
-hostSources := $(commonSources)
+hostSources := $(commonSources) \
+	       yqzy/YQZYAaptConfig.cpp
 
 # For the host
 # =====================================================
diff --git a/libs/androidfw/ResourceTypes.cpp b/libs/androidfw/ResourceTypes.cpp
index 62aabb1..569f0b1 100644
--- a/libs/androidfw/ResourceTypes.cpp
+++ b/libs/androidfw/ResourceTypes.cpp
@@ -36,6 +36,8 @@
 #include <utils/Log.h>
 #include <utils/String16.h>
 #include <utils/String8.h>
+//add by zhao.liu
+#include <androidfw/yqzy/YQZYAaptConfig.h>
 
 #ifdef __ANDROID__
 #include <binder/TextOutput.h>
@@ -1277,6 +1279,7 @@ int32_t ResXMLParser::getAttributeDataType(size_t idx) const
 
             // This is a dynamic reference. We adjust those references
             // to regular references at this level, so lie to the caller.
+		printf("@@@@@@@ResXMLParser::getAttributeDataType DYNAMIC");
             return Res_value::TYPE_REFERENCE;
         }
     }
@@ -1296,7 +1299,7 @@ int32_t ResXMLParser::getAttributeData(size_t idx) const
                     mTree.mDynamicRefTable == NULL) {
                 return dtohl(attr->typedValue.data);
             }
-
+	printf("@@@@@@@ResXMLParser::getAttributeData TYPE_DYNAMIC_REFERENCE");
             uint32_t data = dtohl(attr->typedValue.data);
             if (mTree.mDynamicRefTable->lookupResourceId(&data) == NO_ERROR) {
                 return data;
@@ -5038,8 +5041,10 @@ bool ResTable::stringToValue(Res_value* outValue, String16* outString,
                 }
 
                 uint32_t packageId = Res_GETPACKAGE(rid) + 1;
-                if (packageId != APP_PACKAGE_ID && packageId != SYS_PACKAGE_ID) {
-                    outValue->dataType = Res_value::TYPE_DYNAMIC_REFERENCE;
+                //if (packageId != APP_PACKAGE_ID && packageId != SYS_PACKAGE_ID) {modify by zhao.liu
+		printf("@@@@@@@@@@@@stringToValue %d ",packageId);
+		if (packageId != YQZYAaptConfig::getInstance()->getPackageGroupId() && packageId != SYS_PACKAGE_ID) {
+                   // outValue->dataType = Res_value::TYPE_DYNAMIC_REFERENCE;
                 }
                 outValue->data = rid;
                 return true;
@@ -5055,11 +5060,13 @@ bool ResTable::stringToValue(Res_value* outValue, String16* outString,
                                 String8(name).string(), rid);
                     }
                     uint32_t packageId = Res_GETPACKAGE(rid) + 1;
+		printf("@@@@@@stringToValue accessor is true %d ",packageId);
                     if (packageId == 0x00) {
                         outValue->data = rid;
                         outValue->dataType = Res_value::TYPE_DYNAMIC_REFERENCE;
                         return true;
-                    } else if (packageId == APP_PACKAGE_ID || packageId == SYS_PACKAGE_ID) {
+		    }else if (packageId == YQZYAaptConfig::getInstance()->getPackageGroupId() || packageId == SYS_PACKAGE_ID) {
+                    //} else if (packageId == APP_PACKAGE_ID || packageId == SYS_PACKAGE_ID) {modify by zhao.liu
                         // We accept packageId's generated as 0x01 in order to support
                         // building the android system resources
                         outValue->data = rid;
@@ -6230,7 +6237,10 @@ DynamicRefTable::DynamicRefTable(uint8_t packageId)
     memset(mLookupTable, 0, sizeof(mLookupTable));
 
     // Reserved package ids
-    mLookupTable[APP_PACKAGE_ID] = APP_PACKAGE_ID;
+
+   // mLookupTable[APP_PACKAGE_ID] = APP_PACKAGE_ID; modify by zhao.liu
+	printf("@@@@@@@DynamicRefTable %d ",packageId);
+    mLookupTable[YQZYAaptConfig::getInstance()->getPackageGroupId()] = YQZYAaptConfig::getInstance()->getPackageGroupId();
     mLookupTable[SYS_PACKAGE_ID] = SYS_PACKAGE_ID;
 }
 
@@ -6310,7 +6320,9 @@ status_t DynamicRefTable::lookupResourceId(uint32_t* resId) const {
     uint32_t res = *resId;
     size_t packageId = Res_GETPACKAGE(res) + 1;
 
-    if (packageId == APP_PACKAGE_ID) {
+   // if (packageId == APP_PACKAGE_ID) {modify by zhao.liu
+	printf("@@@@@@lookupResourceId %ld ",packageId);
+      if(packageId==YQZYAaptConfig::getInstance()->getPackageGroupId()){
         // No lookup needs to be done, app package IDs are absolute.
         return NO_ERROR;
     }
diff --git a/tools/aapt/Bundle.h b/tools/aapt/Bundle.h
index cbe7c5d..32c8366 100644
--- a/tools/aapt/Bundle.h
+++ b/tools/aapt/Bundle.h
@@ -225,6 +225,7 @@ public:
         mArgv += n;
         mArgc -= n;
     }
+    
 
 #if 0
     /*
@@ -264,7 +265,9 @@ public:
         }
         return true;
     }
-
+   /* add by zhao.liu */
+   void setPackageId(const char* str) { mPackageId = str; }
+   const android::String8& getPackageId() const { return mPackageId; }
 private:
     /* commands & modifiers */
     Command     mCmd;
@@ -329,7 +332,8 @@ private:
     bool        mBuildSharedLibrary;
     android::String8 mPlatformVersionCode;
     android::String8 mPlatformVersionName;
-
+    /* add by zhao.liu */
+    android::String8 mPackageId;
     /* file specification */
     int         mArgc;
     char* const* mArgv;
diff --git a/tools/aapt/Main.cpp b/tools/aapt/Main.cpp
index f832c60..d2bf893 100644
--- a/tools/aapt/Main.cpp
+++ b/tools/aapt/Main.cpp
@@ -682,7 +682,16 @@ int main(int argc, char* const argv[])
                     bundle.setPseudolocalize(PSEUDO_ACCENTED | PSEUDO_BIDI);
                 } else if (strcmp(cp, "-no-version-vectors") == 0) {
                     bundle.setNoVersionVectors(true);
-                } else {
+                } else if (strcmp(cp, "-pkg-group-id") == 0) {//add by zhao.liu
+                    argc--;
+                    argv++;
+                    if (!argc) {
+                        fprintf(stderr, "ERROR: No argument supplied for '--pkg-group-id' option\n");
+                        wantUsage = true;
+                        goto bail;
+                    }
+                    YQZYAaptConfig::getInstance()->initYQZYConig(argv[0],YQZY_AAPT_CONFIG_TYPE_PACKAGE_GROUP_ID);
+                }  else {
                     fprintf(stderr, "ERROR: Unknown option '-%s'\n", cp);
                     wantUsage = true;
                     goto bail;
diff --git a/tools/aapt/Main.h b/tools/aapt/Main.h
index e84c4c5..78ee90f 100644
--- a/tools/aapt/Main.h
+++ b/tools/aapt/Main.h
@@ -12,6 +12,9 @@
 #include <utils/Errors.h>
 #include <utils/StrongPointer.h>
 
+//add by zhao.liu
+#include <androidfw/yqzy/YQZYAaptConfig.h>
+
 #include "AaptAssets.h"
 #include "ApkBuilder.h"
 #include "Bundle.h"
diff --git a/tools/aapt/ResourceTable.cpp b/tools/aapt/ResourceTable.cpp
index d5a09d8..9bec575 100644
--- a/tools/aapt/ResourceTable.cpp
+++ b/tools/aapt/ResourceTable.cpp
@@ -29,7 +29,7 @@
 #endif
 
 // Set to true for noisy debug output.
-static const bool kIsDebug = false;
+static const bool kIsDebug = true;
 
 #if PRINT_STRING_METRICS
 static const bool kPrintStringMetrics = true;
@@ -1764,7 +1764,8 @@ ResourceTable::ResourceTable(Bundle* bundle, const String16& assetsPackage, Reso
     switch (mPackageType) {
         case App:
         case AppFeature:
-            packageId = 0x7f;
+           // packageId = 0x7f; modify by zhao.liu
+	    packageId=YQZYAaptConfig::getInstance()->getPackageGroupId();
             break;
 
         case System:
@@ -1869,7 +1870,9 @@ status_t ResourceTable::addEntry(const SourcePos& sourcePos,
                 String8(type).string(), String8(name).string(), String8(package).string());
         return UNKNOWN_ERROR;
     }
-    
+     if (kIsDebug) {
+        printf("getEntry at line %d",1927);
+     }
     sp<Entry> e = getEntry(package, type, name, sourcePos, overwrite,
                            params, doSetIndex);
     if (e == NULL) {
@@ -1922,6 +1925,9 @@ status_t ResourceTable::startBag(const SourcePos& sourcePos,
             return UNKNOWN_ERROR;
         }
     }
+     if (kIsDebug) {
+        printf("getEntry at line %d",1980);
+     }
     sp<Entry> e = getEntry(package, type, name, sourcePos, overlay, params);
     if (e == NULL) {
         return UNKNOWN_ERROR;
@@ -1969,6 +1975,9 @@ status_t ResourceTable::addBag(const SourcePos& sourcePos,
                sourcePos.file.striing(), sourcePos.line, String8(type).string());
     }
 #endif
+     if (kIsDebug) {
+        printf("getEntry at line %d",2027);
+     }
     sp<Entry> e = getEntry(package, type, name, sourcePos, replace, params);
     if (e == NULL) {
         return UNKNOWN_ERROR;
@@ -2249,6 +2258,9 @@ bool ResourceTable::stringToValue(Res_value* outValue, StringPool* pool,
                                   uint32_t attrType, const String8* configTypeName,
                                   const ConfigDescription* config)
 {
+    if (kIsDebug) {
+        printf("stringToValue at line %d ",2315);
+    }
     String16 finalStr;
 
     bool res = true;
@@ -2258,6 +2270,9 @@ bool ResourceTable::stringToValue(Res_value* outValue, StringPool* pool,
             .stringToValue(outValue, &finalStr, str.string(), str.size(), preserveSpaces,
                             coerceType, attrID, NULL, &mAssetsPackage, this,
                            accessorCookie, attrType);
+        if (kIsDebug) {
+            printf("stringToValue at line %d ",2322);
+        }
     } else {
         // Styled text can only be a string, and while collecting the style
         // information we have already processed that string!
@@ -2333,6 +2348,7 @@ uint32_t ResourceTable::getCustomResourceWithCreation(
         const String16& package, const String16& type, const String16& name,
         const bool createIfNotFound)
 {
+    printf("getCustomResourceWithCreation");
     uint32_t resId = getCustomResource(package, type, name);
     if (resId != 0 || !createIfNotFound) {
         return resId;
@@ -2824,10 +2840,12 @@ status_t ResourceTable::flatten(Bundle* bundle, const sp<const ResourceFilter>&
     const size_t basePackageCount = table.getBasePackageCount();
     for (size_t i = 0; i < basePackageCount; i++) {
         size_t packageId = table.getBasePackageId(i);
+         printf("@@@@@@@@@@@@@@@@@flatten packageId: packageId=%ld\n", packageId);
         String16 packageName(table.getBasePackageName(i));
-        if (packageId > 0x01 && packageId != 0x7f &&
-                packageName != String16("android")) {
-            libraryPackages.add(sp<Package>(new Package(packageName, packageId)));
+      //  if (packageId > 0x01 && packageId != 0x7f &&packageName != String16("android")) {modify by zhao.liu
+	if (packageId > 0x01 && packageId != YQZYAaptConfig::getInstance()->getPackageGroupId()
+		 &&packageName != String16("android")) {           
+ 	   libraryPackages.add(sp<Package>(new Package(packageName, packageId)));
         }
     }
 
@@ -3629,6 +3647,9 @@ status_t ResourceTable::Entry::prepareFlatten(StringPool* strings, ResourceTable
     if (mType == TYPE_ITEM) {
         Item& it = mItem;
         AccessorCookie ac(it.sourcePos, String8(mName), String8(it.value));
+        if (kIsDebug) {
+            printf("stringToValue at line %d ",3704);
+        }
         if (!table->stringToValue(&it.parsedValue, strings,
                                   it.value, false, true, 0,
                                   &it.style, NULL, &ac, mItemFormat,
@@ -3641,6 +3662,9 @@ status_t ResourceTable::Entry::prepareFlatten(StringPool* strings, ResourceTable
             const String16& key = mBag.keyAt(i);
             Item& it = mBag.editValueAt(i);
             AccessorCookie ac(it.sourcePos, String8(key), String8(it.value));
+            if (kIsDebug) {
+                printf("stringToValue at line %d ",3719);
+            }
             if (!table->stringToValue(&it.parsedValue, strings,
                                       it.value, false, true, it.bagKeyId,
                                       &it.style, NULL, &ac, it.format,
@@ -4201,6 +4225,9 @@ void ResourceTable::Package::movePrivateAttrs() {
         const size_t entryCount = entries.size();
         for (size_t j = 0; j < entryCount; j++) {
             const sp<Entry>& oldEntry = entries[j];
+             if (kIsDebug) {
+                printf("getEntry at line %d",4260);
+             }
             sp<Entry> entry = privateAttrType->getEntry(
                     cl->getName(), oldEntry->getPos(), &entries.keyAt(j));
             *entry = *oldEntry;
@@ -4359,6 +4386,9 @@ bool ResourceTable::getItemValue(
     bool res = false;
     if (item != NULL) {
         if (item->evaluating) {
+            if (kIsDebug) {
+                printf("getEntry at line %d",4418);
+            }
             sp<const Entry> e = getEntry(resID);
             const size_t N = e->getBag().size();
             size_t i;
@@ -4373,6 +4403,9 @@ bool ResourceTable::getItemValue(
             return false;
         }
         item->evaluating = true;
+        if (kIsDebug) {
+            printf("stringToValue at line %d ",4460);
+        }
         res = stringToValue(outValue, NULL, item->value, false, false, item->bagKeyId);
         if (kIsDebug) {
             if (res) {
@@ -4658,7 +4691,9 @@ status_t ResourceTable::modifyForCompat(const Bundle* bundle) {
                                         String8(entriesToAdd[i].value->getName()).string(),
                                         entriesToAdd[i].key.toString().string());
                     }
-
+                    if (kIsDebug) {
+                        printf("getEntry at line %d",4719);
+                     }
                     sp<Entry> newEntry = t->getEntry(c->getName(),
                             entriesToAdd[i].value->getPos(),
                             &entriesToAdd[i].key);
diff --git a/tools/aapt/ResourceTable.h b/tools/aapt/ResourceTable.h
index c4bdf09..f46704c 100644
--- a/tools/aapt/ResourceTable.h
+++ b/tools/aapt/ResourceTable.h
@@ -11,6 +11,9 @@
 #include <queue>
 #include <set>
 
+//add by zhao.liu
+#include <androidfw/yqzy/YQZYAaptConfig.h>
+
 #include "ConfigDescription.h"
 #include "ResourceFilter.h"
 #include "SourcePos.h"
@@ -602,6 +605,8 @@ private:
     // set of string resources names that have a default localization
     std::set<String16> mHasDefaultLocalization;
     std::queue<CompileResourceWorkItem> mWorkQueue;
+    ssize_t apkStringToInt(const String8& s);
+    uint32_t apkgetHex(char c, bool* outError);
 };
 
 #endif
diff --git a/tools/aapt/XMLNode.cpp b/tools/aapt/XMLNode.cpp
index ca3f687..8040ed7 100644
--- a/tools/aapt/XMLNode.cpp
+++ b/tools/aapt/XMLNode.cpp
@@ -27,7 +27,7 @@
 #endif
 
 // Set to true for noisy debug output.
-static const bool kIsDebug = false;
+static const bool kIsDebug = true;
 // Set to true for noisy debug output of parsing.
 static const bool kIsDebugParse = false;
 
@@ -969,6 +969,9 @@ status_t XMLNode::parseValues(const sp<AaptAssets>& assets,
             AccessorCookie ac(SourcePos(mFilename, getStartLineNumber()), String8(e.name),
                     String8(e.string));
             table->setCurrentXmlPos(SourcePos(mFilename, getStartLineNumber()));
+            if (kIsDebug) {
+                printf("stringToValue at xmlnode line %d ",973);
+            }
             if (!assets->getIncludedResources()
                     .stringToValue(&e.value, &e.string,
                                   e.string.string(), e.string.size(), true, true,


